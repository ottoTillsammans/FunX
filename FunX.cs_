using System;
using System.Collections.Generic;

// 
// FuX (Functional Extensions) 1.0
//
// C# in functional style
//
// OttoTillsammans / 11.07.2022
//

namespace FunExtensions
{
    public static class FunX
    {
        #region Base API.

        /// <summary>
        /// Evaluate function on each collection item.
        /// </summary>
        /// <typeparam name="T">Type of items.</typeparam>
        /// <param name="values">Collection of items.</param>
        /// <param name="func">Function to apply to items.</param>
        public static void Feach<T>(this IEnumerable<T> values, Action<T> func)
        {
            foreach (var val in values) func(val);
        }

        /// <summary>
        /// Evaluate function on argument and get result.
        /// </summary>
        /// <typeparam name="T">Type of function argument.</typeparam>
        /// <typeparam name="TResult">Type of function result.</typeparam>
        /// <param name="val">Argument.</param>
        /// <param name="func">Function.</param>
        /// <returns>Func evaluating result.</returns>
        public static TResult Do<T, TResult>(this T val, Func<T, TResult> func) => func(val);

        /// <summary>
        /// Evaluate function on argument.
        /// </summary>
        /// <typeparam name="T">Type of function argument.</typeparam>
        /// <param name="val">Argument.</param>
        /// <param name="func">Function.</param>
        public static void Done<T>(this T val, Action<T> func) => func(val);

        #endregion
    }
}
